{"name":"Special mvc validation attributes","tagline":"Special MVC validation attributes for cases when you need conditional validation or/and date comparison. ","body":"Special MVC Validation Attributes\r\n=================================\r\n\r\nSpecial MVC validation attributes for cases when you need conditional validation or/and date comparison. \r\n\r\n##Attributes included\r\n\r\n[ConditionlRequired] - for conditional requred validation\r\n\r\n[DateValidator] - for validating date format\r\n\r\n[DateFieldsCompare] - for date comparison of two date properties\r\n\r\n[DateTimeNowComparison] - for date comparison with current date or datetime\r\n\r\n\r\n##Example of usage\r\n\r\n\r\n###Conditional Required Attribute\r\n\r\n        using System;\r\n        using System.Collections.Generic;\r\n        using System.Linq;\r\n        using System.Web;\r\n        using System.Web.Mvc;\r\n        using mUtility.Validation;\r\n        \r\n        namespace TestWebApp.Models\r\n        {\r\n            public class FormModel\r\n            {\r\n                //Conditional required if \"Text2\" property is not null, empty or white space\r\n                [ConditionlRequired(\"Text2\", ErrorMessage = \"Text1 Error Message\")]\r\n                public string Text1 { get; set; }\r\n        \r\n                public string Text2 { get; set; } \r\n                \r\n            }\r\n        }\r\n\r\n\r\n\r\n###Date Validator Attribute\r\n\r\n                //Optional date field validator\r\n                [DateValidator(ErrorMessage = \"Incorrect date format\")]\r\n                public string Birthday { get; set; }\r\n        \r\n                //Date validation with forced date format\r\n                [DateValidator(\"dd-MM-yyyy\", ErrorMessage = \"Incorrect date format\")]\r\n                public string Birthday { get; set; }\r\n        \r\n                //Required date field with forced date format\r\n                [DateValidator(\"dd-MM-yyyy\", required: true, ErrorMessage = \"Incorrect date format\")]\r\n                public string Birthday { get; set; }\r\n                \r\n                \r\n                \r\n###DateTimeNow Comparison Attribute\r\n\r\n        //Compare date field with current datetime\r\n        [DateTimeNowComparison(DateComparisonType.LowerThan, ErrorMessage = \"Date of birth must be lower than current date\")]\r\n        public string Birthday { get; set; }\r\n        \r\n        //Compare date field only with current date\r\n        [DateTimeNowComparison(DateComparisonType.Equal, onlyDate: true, ErrorMessage = \"Date of birth must be equal to current date\")]\r\n        public string Birthday { get; set; }\r\n        \r\n        //Compare date field with current datetime and force date format\r\n        [DateTimeNowComparison(\"dd-MM-yyyy\", DateComparisonType.LowerThanOrEqual, ErrorMessage = \"Date of birth must be lower than or equal to current date\"))]\r\n        public string Birthday { get; set; }\r\n                \r\n                \r\n                \r\n###Date Fields Compare Attribute\r\n\r\n        //Comparison of two date fields\r\n        [DateFieldsCompareValidator(\"DateTo\",DateComparisonType.GreaterThan, ErrorMessage = \"FromDate must be greater than ToDate\")]\r\n        public string FromDate { get; set; }\r\n        \r\n        [DateFieldsCompareValidator(\"FromDate\",DateComparisonType.LowerThanOrEqual, ErrorMessage = \"ToDate must be lower than or equal to FromDate\")]\r\n        public string ToDate { get; set; }\r\n        \r\n###Date Comparison Types\r\n\r\nAvailable values of DateComparisonType enum:\r\n\r\n        DateComparisonType.Equal;\r\n        DateComparisonType.GreaterThan\r\n        DateComparisonType.GreaterThanOrEqual\r\n        DateComparisonType.LowerThan\r\n        DateComparisonType.LowerThanOrEqual\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}